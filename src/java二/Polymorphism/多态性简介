
      多态性是面向对象中的第三大特征，多态是继承性的基础之上扩展出来的功能，可以实现父子类之间的相互转换

      在java之中对于多态性两种实现方式
        *方法的多态性：
              —| 方法的重载
              —| 方法的覆写

        *对象的多态性：父子实例之间的转换处理，
              —| 对象的向上转型： 父类 父类实例  = 子类实例  、自动完成转换
              —| 对象的向下转型： 子类 子类实例  = （子类）父类实例  、强制完成转换

          在向下转型之前一定要先向上转型
          如果两个没有任何关系的实例发生强制转型，就会出现异常，所有向下转型不安全

          instanceo关键字，可以判断